<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.artspark.member.model.dao.MemberMapper">

	<resultMap id="orderBuyOptionMap" type="orderBuyOption">
	<result property="buyNo" column="BUY_NO"/>
	<result property="productNo" column="PRODUCT_NO"/>
	<result property="paymentName" column="PAYMENT_NAME"/>
	<result property="paymentEmail" column="PAYMENT_EMAIL"/>
	<result property="paymentPhone" column="PAYMENT_PHONE"/>
	<result property="paymentRequest" column="PAYMENT_REQUEST"/>
	<result property="paymentDate" column="PAYMENT_DATE"/>
	<result property="productPurpose" column="PRODUCT_PURPOSE"/>
	<result property="detailType" column="DETAIL_TYPE"/>
	<result property="detailSize" column="DETAIL_SIZE"/>
	<result property="detailPixel" column="DETAIL_PIXEL"/>
	<result property="updateCount" column="UPDATE_COUNT"/>
	<result property="detailWorkdate" column="DETAIL_WORKDATE"/>
	<result property="memNickname" column="MEM_NICKNAME"/>
	<result property="artistPath" column="ARTIST_PATH"/>
	<result property="productTitle" column="PRODUCT_TITLE"/>
	<collection property="buyOptionList" resultMap="buyOptionMap" javaType="list"/>
	</resultMap>
	
	
	<resultMap id="buyOptionMap" type="buyOptionOrder">
	<result property="buyOptionName" column="BUY_OPTION_NAME"/>
	<result property="buyDetailOptionName" column="BUY_DETAIL_OPTION_NAME"/>
	<result property="buyOptionPrice" column="BUY_OPTION_PRICE"/>
	<result property="buyOptionAmount" column="BUY_OPTION_AMOUNT"/>
	</resultMap>

	
	<resultMap id="interest" type="interest">
	<result property="artistPath" column="ARTIST_PATH"/>
	<result property="memNickname" column="MEM_NICKNAME"/>
	<result property="productTitle" column="PRODUCT_TITLE"/>
	<result property="avgStar" column="AVG_STAR"/>
	<result property="productNo" column="PRODUCT_NO"/>
	    <collection property="filePaths" ofType="string">
        <result column="FILE_PATH"/>
    </collection>
	</resultMap>
	
	
	
	<!--전체 조회 -->
	<select id="memberList" resultType="member">
		SELECT
				MEM_ID memId,
				MEM_PWD memPwd,
				MEM_NICKNAME memNickname,
				MEM_EMAIL memEmail,
				MEM_ENROLL memEnroll
		  FROM
				MEMBER
	</select>
	
	
	
	<!-- 회원가입 -->
	<insert id="insert" parameterType="member">
		INSERT 
		  INTO
		  		MEMBER
		  		(
		  		MEM_ID,
		  		MEM_PWD,
		  		MEM_NICKNAME,
		  		MEM_EMAIL
		  		)
		VALUES
				(
				#{memId},
				#{memPwd},
				#{memNickname},
				#{memEmail}
				)
	</insert>
	<!--로그인 -->
	<select id="login" resultType="member" parameterType="member">
  		 SELECT
			      MEM_ID         memId,
			      MEM_PWD        memPwd,
			      MEM_NICKNAME   memNickname,
			      STATUS         status,
			      MEM_EMAIL      memEmail,
			      MEM_ENROLL     memEnroll,
				  MEM_CATEGORY   memCategory
		  FROM
		         	MEMBER
		 WHERE
		         MEM_ID =#{memId}
		  AND    
		         MEM_CATEGORY IN ('A', 'B', 'C')
		  AND
		  		 STATUS ='Y'
    </select>

	<!--아이디 중복체크 -->
	<select id="idCheck" parameterType="string" resultType="_int">
		SELECT 
				 COUNT(*)
		  FROM	
				 MEMBER
		 WHERE
				 MEM_ID=#{checkId}
	</select>
	
	<!--일반회원 정보 수정 -->
	<update id="update" parameterType="member">
		UPDATE
				MEMBER
		   SET
		   		MEM_NICKNAME=#{memNickname},
		   		MEM_EMAIL=#{memEmail},
		   		MEM_CATEGORY ='B'
		 WHERE
				MEM_ID= #{memId}
	</update>
	
	
    <!-- 일반에서 판매자로 정보 수정  -->
    <insert id="insertOrUpdateArtist" parameterType="artist">
     	MERGE 
     	 INTO   ARTIST
    	USING 
                DUAL 
           ON   (
                MEM_ID = #{memId}
                )
    	WHEN    MATCHED THEN
       UPDATE 
          SET
	            ARTIST_INTRO = #{artistIntro},
	            ARTIST_PHONE = #{artistPhone},
	            ARTIST_PATH = #{artistPath},
	            ARTIST_ORIGIN_NAME = #{artistOriginName},
	            ARTIST_CHANGE_NAME = #{artistChangeName}
         WHEN 
          NOT 
      MATCHED 
         THEN
        INSERT 
        		(
        		ARTIST_INTRO, 
        		ARTIST_PHONE, 
        		ARTIST_PATH, 
        		ARTIST_ORIGIN_NAME, 
        		ARTIST_CHANGE_NAME, 
        		MEM_ID
        		)
        VALUES 
        		(
        		#{artistIntro},
        		#{artistPhone},
       		    #{artistPath}, 
       		    #{artistOriginName}, 
       		    #{artistChangeName}, 
       		    #{memId}
        		)
	</insert>

	<update id="updateMember" parameterType="member">
	    UPDATE
	    		 MEMBER
	       SET 
	             MEM_NICKNAME = #{memNickname},
	             MEM_EMAIL = #{memEmail}
	     WHERE 
	             MEM_ID = #{memId}

	</update>
	<select id="getArtist" parameterType="string" resultType="artist">
	    SELECT  
	    		ARTIST_INTRO        artistIntro,
	    		ARTIST_PHONE        artistPhone,
	    		ARTIST_PATH         artistPath,
	    		ARTIST_ORIGIN_NAME  artistOriginName,
	    		ARTIST_CHANGE_NAME  artistChangeName,
	    		MEM_ID              memId
	     FROM 
	            ARTIST
	    WHERE 
	            MEM_ID = #{memId}
	</select>

 <!-- 회원 ID로 회원 정보 조회 -->
	<select id="getMemberById" parameterType="string" resultType="member">
	    SELECT
		        MEM_ID memId,
		        MEM_PWD memPwd,
		        MEM_NICKNAME memNickname,
		        MEM_EMAIL memEmail,
		        MEM_ENROLL memEnroll,
		        STATUS status,
		        MEM_CATEGORY memCategory
	    FROM
	        	MEMBER
	    WHERE
	        	MEM_ID = #{memId}
	</select>



	<!-- 아이디 찾기 -->
	<select id="findId" resultType="string" parameterType="map">
        SELECT 
        		MEM_ID
          FROM
                MEMBER
         WHERE
                MEM_NICKNAME= #{memNickname}
           AND   
           		MEM_EMAIL= #{memEmail}
    </select>
	

	<!--회원 탈퇴 -->
	<update id="delete" parameterType="member">
		UPDATE
				MEMBER
		   SET
		   		STATUS ='N',
		   		MEM_ENROLL = SYSDATE
		 WHERE
		 		MEM_ID=#{memId}
	</update>
	<!--비밀번호 찾기 -->
	<select id="findPwd" parameterType="member">
		SELECT
		        MEM_PWD
		  FROM
		        MEMBER
		 WHERE
		        MEM_ID=#{memId}
		   AND
		        MEM_NICKNAME=#{memNickname}
		   AND
		        MEM_EMAIL=#{memEmail}
	</select>
	
	<!-- 비밀번호 수정 -->
	<update id="changePwd" parameterType="member">
		UPDATE
				MEMBER
		   SET
		   		MEM_PWD = #{memPwd}
		 WHERE
		 		MEM_ID= #{memId}
	</update>
	
	<!-- 메일 보내기 -->
	<select id="pwdCheck" parameterType="string" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		MEMBER
		 WHERE
		 		MEM_PWD=#{memPwd}	
	</select>
	
	<!-- 메일 값 추가 -->
	<insert id="sendMail" parameterType="com.kh.artspark.member.model.vo.Mail">
		INSERT
		  INTO
		  		MAIL
		VALUES
				(
				#{who},
				#{code},
				SYSDATE
				)
	</insert>
	
	  
	<!-- 메일로 받는 비밀번호로 인해 회원 정보 업데이트에 필요한 맵 정보 -->  
	<resultMap id="memberResultSet" type="member">
    <result property="memId" column="MEM_ID" />
    <result property="memEmail" column="MEM_EMAIL" />
    <result property="memNickname" column="MEM_NICKNAME" />
	</resultMap>
	  
	  
    <update id="updatePassword">
        UPDATE 
        		MEMBER
           SET 
        		MEM_PWD = #{memPwd}
         WHERE 
        		MEM_EMAIL = #{memEmail}
    </update>
   	
   	<select id="getMember" resultMap="memberResultSet">
	    SELECT 
	    		*
	     FROM
	      		MEMBER
	    WHERE
	    		MEM_ID = #{memId}
	      AND 
	    		MEM_NICKNAME = #{memNickname}
	      AND 
	    		MEM_EMAIL = #{memEmail}
	</select>


	
	
	<!--주문관리  -->
	<select id="orderBuyOption"  parameterType="String" resultMap="orderBuyOptionMap">
		SELECT
			        B.BUY_NO,
			        B.PRODUCT_NO,
			        PM.PAYMENT_NAME,
			        PM.PAYMENT_EMAIL,
			        PM.PAYMENT_PHONE,
			        PM.PAYMENT_REQUEST,
			        PM.PAYMENT_DATE,
			        PD.PRODUCT_PURPOSE,
			        PD.DETAIL_TYPE,
			        PD.DETAIL_SIZE,
			        PD.DETAIL_PIXEL,
			        PD.UPDATE_COUNT,
			        PD.DETAIL_WORKDATE,
			        M.MEM_NICKNAME,
			        A.ARTIST_PATH,
			        BO.BUY_OPTION_NAME,
			        BO.BUY_DETAIL_OPTION_NAME,
			        BO.BUY_OPTION_PRICE,
			        BO.BUY_OPTION_AMOUNT,
			        P.PRODUCT_TITLE
			      
 		FROM
                    BUY B
			        JOIN PAYMENT PM ON B.BUY_NO = PM.BUY_NO
			        JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_NO = B.PRODUCT_NO
			        JOIN MEMBER M ON B.MEM_ID = M.MEM_ID
			        JOIN ARTIST A ON B.MEM_ID = A.MEM_ID
			        JOIN BUY_OPTION BO ON B.BUY_NO = BO.BUY_NO
			        JOIN PRODUCT P ON B.PRODUCT_NO = P.PRODUCT_NO
 		WHERE
        			B.MEM_ID = #{memId}
	    ORDER
           BY
                    PM.PAYMENT_DATE DESC
	</select>
	
	
		<!-- 관심 판매자 목록 -->
	<select id="interest" parameterType="String" resultMap="interest">
		SELECT
			        A.ARTIST_PATH,
			        M.MEM_NICKNAME,
			        PF.FILE_PATH,
			        P.PRODUCT_TITLE,
			        P.PRODUCT_NO,
			        ROUND(NVL(AVG(R.REVIEW_STAR), 0), 1) AS AVG_STAR
		 FROM
			        PRODUCT P
			        JOIN MEMBER M ON P.MEM_ID = M.MEM_ID
			        JOIN PRODUCTFILE PF ON PF.PRODUCT_NO = P.PRODUCT_NO
			        LEFT JOIN REVIEW R ON P.PRODUCT_NO = R.PRODUCT_NO
			        LEFT JOIN ARTIST A ON A.MEM_ID = M.MEM_ID
			        JOIN JJIM J ON J.PRODUCT_NO = P.PRODUCT_NO
			           
	    WHERE
			        J.MEM_ID = #{mem_id}
		GROUP
		   BY
			        A.ARTIST_PATH,
			        M.MEM_NICKNAME,
			        PF.FILE_PATH,
			        P.PRODUCT_TITLE,
			        P.PRODUCT_NO
	</select>
	
	<!-- 관심 판매자 삭제 -->
	<!-- 찜 삭제 -->
	<delete id="deleteJjim" parameterType="map">
		DELETE
		  FROM
		  		JJIM
		 WHERE
		 		MEM_ID = #{loginId}
		   AND
		   		PRODUCT_NO = #{productNo}
	</delete>
	
	<!-- 별점  -->
	<select id="reviewStar" parameterType="String">
		SELECT
				AVG(REVIEW_STAR)
		  FROM
		  		REVIEW
		 WHERE
		 		MEM_ID = #{memId}
	</select>
	
	<!-- 전체 회원수 조회 -->
	<select id="memberCount" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		MEMBER
	</select>

	<!-- 전체 정지회원수 조회 -->
	<select id="suspendedMemberCount" resultType="_int">
		SELECT
				COUNT(*)
		  FROM
		  		MEMBER
		 WHERE
		 		STATUS = 'N'
	</select>
	
	<!-- resultMap 정의 -->
    <resultMap id="suspendedMemberResultMap" type="hashmap">
        <result property="memId" column="MEM_ID"/>
        <result property="memSuspension" column="MEM_SUSPENSION"/>
        <result property="memReportcount" column="MEM_REPORTCOUNT"/>
        <result property="reportContent" column="REPORT_CONTENT"/>
    </resultMap>

    <!-- 조인 쿼리 -->

    <select id="suspendedMemberList" resultMap="suspendedMemberResultMap">
        SELECT
            	M.MEM_ID,
            	M.MEM_SUSPENSION,
            	M.MEM_REPORTCOUNT,
            	R.REPORT_CONTENT
          FROM
            	MEMBER M
          JOIN
            	REPORT R ON M.MEM_ID = R.MEM_ID
         WHERE
            	M.STATUS = 'N'
         ORDER
            BY
            	M.MEM_REPORTCOUNT
           		
    </select>

</mapper>
