<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.artspark.member.model.dao.SocialMapper">

<!--일반회원 정보 수정 -->
	<update id="update" parameterType="member">
		UPDATE
				MEMBER
		   SET
		   		MEM_NICKNAME=#{memNickname},
		   		MEM_EMAIL=#{memEmail}
		 WHERE
				MEM_ID= #{memId}
	</update>
	
	
    <!-- 일반에서 판매자로 정보 수정  -->
    <insert id="insertOrUpdateArtist" parameterType="artist">
     	MERGE 
     	 INTO   ARTIST
    	USING 
                DUAL 
           ON   (
                MEM_ID = #{memId}
                )
    	WHEN    MATCHED THEN
       UPDATE 
          SET
	            ARTIST_INTRO = #{artistIntro},
	            ARTIST_PHONE = #{artistPhone},
	            ARTIST_PATH = #{artistPath},
	            ARTIST_ORIGIN_NAME = #{artistOriginName},
	            ARTIST_CHANGE_NAME = #{artistChangeName}
         WHEN 
          NOT 
      MATCHED 
         THEN
        INSERT 
        		(
        		ARTIST_INTRO, 
        		ARTIST_PHONE, 
        		ARTIST_PATH, 
        		ARTIST_ORIGIN_NAME, 
        		ARTIST_CHANGE_NAME, 
        		MEM_ID
        		)
        VALUES 
        		(
        		#{artistIntro},
        		#{artistPhone},
       		    #{artistPath}, 
       		    #{artistOriginName}, 
       		    #{artistChangeName}, 
       		    #{memId}
        		)
	</insert>

	<update id="updateMember" parameterType="member">
	    UPDATE
	    		 MEMBER
	       SET 
	             MEM_NICKNAME = #{memNickname},
	             MEM_EMAIL = #{memEmail}
	     WHERE 
	             MEM_ID = #{memId}
	</update>
	<select id="getArtist" parameterType="string" resultType="artist">
	    SELECT  
	    		ARTIST_INTRO        artistIntro,
	    		ARTIST_PHONE        artistPhone,
	    		ARTIST_PATH         artistPath,
	    		ARTIST_ORIGIN_NAME  artistOriginName,
	    		ARTIST_CHANGE_NAME  artistChangeName,
	    		MEM_ID              memId
	     FROM 
	            ARTIST
	    WHERE 
	            MEM_ID = #{memId}
	</select>


	<!--회원 탈퇴 -->
	<update id="delete" parameterType="member">
		UPDATE
				MEMBER
		   SET
		   		STATUS ='N',
		   		MEM_ENROLL = SYSDATE
		 WHERE
		 		MEM_ID=#{memId}
	</update>
	
	<!--주문관리  -->
	<select id="orderBuyOption"  parameterType="String" resultMap="orderBuyOptionMap">
		SELECT
			        B.BUY_NO,
			        B.PRODUCT_NO,
			        PM.PAYMENT_NAME,
			        PM.PAYMENT_EMAIL,
			        PM.PAYMENT_PHONE,
			        PM.PAYMENT_REQUEST,
			        PM.PAYMENT_DATE,
			        PD.PRODUCT_PURPOSE,
			        PD.DETAIL_TYPE,
			        PD.DETAIL_SIZE,
			        PD.DETAIL_PIXEL,
			        PD.UPDATE_COUNT,
			        PD.DETAIL_WORKDATE,
			        M.MEM_NICKNAME,
			        A.ARTIST_PATH,
			        BO.BUY_OPTION_NAME,
			        BO.BUY_DETAIL_OPTION_NAME,
			        BO.BUY_OPTION_PRICE,
			        BO.BUY_OPTION_AMOUNT,
			        P.PRODUCT_TITLE
 		FROM
                    BUY B
			        JOIN PAYMENT PM ON B.BUY_NO = PM.BUY_NO
			        JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_NO = B.PRODUCT_NO
			        JOIN MEMBER M ON B.MEM_ID = M.MEM_ID
			        JOIN ARTIST A ON B.MEM_ID = A.MEM_ID
			        JOIN BUY_OPTION BO ON B.BUY_NO = BO.BUY_NO
			        JOIN PRODUCT P ON B.PRODUCT_NO = P.PRODUCT_NO
 		WHERE
        			B.MEM_ID = #{memId}
	    ORDER
           BY
                    PM.PAYMENT_DATE DESC
	</select>
	
	
		<!-- 관심 판매자 목록 -->
	<select id="interest" parameterType="String" resultMap="interest">
		SELECT
					A.ARTIST_PATH,
					M.MEM_NICKNAME,
					PF.FILE_PATH,
					P.PRODUCT_TITLE,
					R.REVIEW_STAR
		 FROM
					PRODUCT P
					JOIN MEMBER M ON P.MEM_ID = M.MEM_ID
					JOIN PRODUCTFILE PF ON PF.PRODUCT_NO = P.PRODUCT_NO
					JOIN REVIEW R ON R.MEM_ID = P.MEM_ID
					JOIN ARTIST A ON A.MEM_ID = M.MEM_ID
	    WHERE
	    			M.MEM_ID = #{memId}
	</select>
	
	<select id="reviewStar" parameterType="String">
		SELECT
				AVG(REVIEW_STAR)
		  FROM
		  		REVIEW
		 WHERE
		 		MEM_ID = #{memId}
	</select>
</mapper>